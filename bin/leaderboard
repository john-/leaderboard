#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mojo::Util qw(dumper);
use Mojo::Log;
use File::Temp;    # names for tts files
use Text::CSV;
#use POE::Filter::CSV;

my $config = plugin Config => { file => '../config/leaderboard.conf' };

app->log( Mojo::Log->new( path => '../log/leaderboard.log' ) );

app->plugin('RenderFile');
app->plugin('CORS');
app->plugin('ForkCall');    # used to have swift not block

app->secrets( ['Specfying a secret to make the reminder go away.'] );

app->defaults( ua => Mojo::UserAgent->new );

get '/self' => sub {
    my $c = shift;

    $c->render( json => { function => 'Leaderboard' } );

# ugh this is nasty but I need to store it here because it does not work in the helper
    app->defaults->{audio_url} = $c->url_for('audio')->to_abs;
};

get '/script' => { template => 'script' };

get '/audio' => sub {
    my $c    = shift;
    my $file = $c->param('file');

    # Open file in browser(do not show save dialog)
    $c->render_file(
        'filepath'            => "../archive/$file",
        'content_disposition' => 'inline'
    );
};

get '/standings' => sub {
    my $c = shift;

    $c->render( json => app->defaults->{field} );
};

websocket '/output' => sub {
    my $c = shift;

    $c->inactivity_timeout(60);

    my $client =
      $c->tx->remote_address . $c->tx->remote_port;    # unique identifier
        # TODO: delete this on connection close

    $c->send( { json => app->config_msg } );

    #app->defaults->{announce_sub}{$client} = [];

    #my $trans_ref = 0;
    my $id = Mojo::IOLoop->recurring(
        1 => sub {
            my $loop = shift;

            while ( my $msg = app->get_msg($client) ) {
                $c = $c->send( { json => $msg } );
                app->log->info("item to let client know about: $msg->{type}");
            }
        }
    );

    $c->on(
        json => sub {
            my ( $ws, $hash ) = @_;

            if ( $hash->{type} eq 'set_series' ) {
                app->set_series( $hash->{series} );
            }
            elsif ( $hash->{type} eq 'set_rate' ) {
                app->set_rate( $hash->{rate} );
            }

            #app->log->debug("Message: ".dumper($hash));
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            Mojo::IOLoop->remove($id);
            $c->app->log->debug("WebSocket closed ($code)");
        }
    );

};

helper config_msg => sub {
    my $self = shift;

    # TODO: Not all $config data needs to go to client (urls, etc).
    return { type => 'config', %{$config}, series => app->defaults->{series} };
};

helper get_msg => sub {
    my ( $self, $client ) = @_;

    return shift @{ app->defaults->{announce_sub}{$client} };
};

helper publish => sub {
    my ( $self, $msg ) = @_;

    push @$_, $msg for values %{ app->defaults->{announce_sub} };
};

helper cancel_cur_req => sub {

    foreach ( keys %{ app->defaults->{loop_ids} } ) {
        app->log->info( sprintf( 'cleaning up timer (%s)', $_ ) );
        Mojo::IOLoop->remove( app->defaults->{loop_ids}{$_} );
        delete app->defaults->{loop_ids}{$_};
    }
};

helper set_series => sub {
    my ( $self, $series ) = @_;

    app->log->info("series: $series");

    app->cancel_cur_req;

    app->defaults->{series} = $series;
    delete app->defaults->{update_counter};
    app->defaults->{prev}{field}   = {};
    app->defaults->{prev}{session} = {};

#app->defaults->{announce_sub}   = {};   # this should not go here...maybe someplace else
    app->publish( app->config_msg );

    app->get_all_boards;
};

helper set_rate => sub {
    my ( $self, $rate ) = @_;

    app->log->info("rate: $rate");

    app->cancel_cur_req;

    $config->{rate} = $rate;
    app->get_all_boards;

    app->publish( app->config_msg );
};

helper get_all_boards => sub {

    if (app->defaults->{series} eq 'Off') { return }

    my $series_info = $config->{boards}{ app->defaults->{series} };

    my $method = $series_info->{method};
    if ($method eq 'get') {
        foreach my $lboard ( @{ $series_info->{sources} } ) {
            app->get_board($lboard);
        }
    } elsif ($method eq 'stream') {
	app->stream_board( $series_info->{source} );
    }

};

helper stream_board => sub {
    my ( $self, $lboard ) = @_;

    app->log->info(sprintf('about to stream %s', $lboard->{host}));

    my $id = Mojo::IOLoop->client(
	{ address => $lboard->{host}, port => $lboard->{port} } => sub {
	    my ( $loop, $err, $stream ) = @_;

            #@{ app->defaults->{field} } = [];
            %{ app->defaults->{session} } = ();
	    %{ app->defaults->{car} }   = ();  # Store car/drive info
	    %{ app->defaults->{class} } = ();   # Car class information
	    $self->{unparsed} = '';

	    $stream->on(
		read => sub {
		    my ( $stream, $bytes ) = @_;

		    # Process input
		    #app->log->debug("got line |$bytes|");

		    my $parser = $lboard->{purpose} . '_parser';

                    if ($self->{unparsed}) {
			$bytes = $self->{unparsed} . $bytes;
			app->log->debug("added unparsed bit: " . $self->{unparsed});
			$self->{unparsed} = '';
		    }

		    if ($bytes !~ /.+\n$/) {
		        #if ($tmp =~ /(\$.+\n)(\$.+$)/) {
			app->log->debug('got an incomplete line');
		        if ($bytes =~ /(.+)(\$.*$)/ms) {
			    app->log->debug("last bit: $2");
			    $bytes = $1;
			    $self->{unparsed} = $2;
			    #$tmp =~ s/$2//ee;
			    #app->log->error("new bytes: $1");
                        }
		    }

		    foreach my $line ( split /\n/, $bytes ) {

			#$line =~ s/\r//;
			app->log->debug("split line: |$line|");
			if ($line =~ /^----|Use of|http/) {
			    # do nothing
			} elsif ($line =~ /^\$/) {
			#app->log->debug('got line'.$line);
			#Mojo::IOLoop->next_tick( sub { app->$parser( $line, $lboard ) } );
			    $line =~ s/\r//;
			    #$self->{unparsed} = '';
			    app->$parser( $line, $lboard );
			} #else {
			#    $self->{unparsed} = $line;
			#    app->log->debug("not enough to parse: $line");
                        #}
		    }
		}
	    );

	    app->present_board($lboard);

	}
    );

};

helper present_board => sub {
    my ( $self, $lboard ) = @_;

    #app->log->debug('present board: '.dumper(app->defaults->{field}));

    Mojo::IOLoop->next_tick( sub { app->review_field } );
    Mojo::IOLoop->next_tick( sub { app->review_session } );

    my $rate = $config->{rate};
    app->defaults->{loop_ids}{ $lboard->{purpose} } =
        Mojo::IOLoop->timer( $rate => sub { app->present_board($lboard) } );
};


helper get_board => sub {
    my ( $self, $lboard ) = @_;

    #app->log->info(dumper($lboard));
    my $url = $lboard->{url};
    app->defaults->{ua}->get(
        $url => sub {
            my ( $ua, $tx ) = @_;

            app->log->info(
                sprintf( 'requesting page (%s)...', $lboard->{purpose} ) );
            my $rate = $config->{rate};
            if ( my $res = $tx->success ) {
                app->log->info(
                    sprintf( 'got response (%s)', $lboard->{purpose} ) );

                #print Dumper($tx->res->json);
                my $parser = $lboard->{purpose} . '_parser';

                Mojo::IOLoop->next_tick( sub { app->$parser( $tx, $lboard ) } );

                app->record_file( $tx->res->to_string, $lboard->{purpose} );

            }
            else {
                my $err = $tx->error;
                $rate = 3;
                app->log->error(
                    sprintf(
                        'could not retrieve page (%s): %s',
                        $lboard->{purpose}, $err->{message}
                    )
                );
            }

            app->defaults->{loop_ids}{ $lboard->{purpose} } =
              Mojo::IOLoop->timer( $rate => sub { app->get_board($lboard) } );

        }
    );

};

helper record_file => sub {
    my ( $self, $content, $purpose ) = @_;

    app->defaults->{update_counter}{$purpose}++;

    my $file = sprintf(
        '../archive/leaderboards/%s-%s-%s-%s.raw',
        app->defaults->{series},
        $purpose, $$, app->defaults->{update_counter}{$purpose}
    );

    app->log->info("archive: $file");

    open my $fh, '>>', $file
      or app->log->error("Can't open $file: $!");

    print $fh $content;

    close $fh or app->log->error("Can't close $file: $!");

};

helper rm_stream_parser => sub {
    my ( $self, $line, $lboard ) = @_;

    $line =~ s/\r//;
    #app->log->debug('line: '.$line);
    my $csv = Text::CSV->new ( { binary => 1 } );
    my $status = $csv->parse($line);
    my @row = $csv->fields();
    #app->log->debug("status: $status");
    #app->log->debug("tried to parse |$line| and got: ".dumper(@row));

    if ($status == 0) {
	app->log->debug("could not parse: |$line| (skipping)");
	return;
    }
    #if (!@row) {
	#app->log->debug("line: $line");
    #}
    my $rec = $row[0];
    if ($rec eq '$C') { # car class
	app->defaults->{class}{$row[1]} = $row[2];
            #print "class: " . $self->{class}{$row->[1]}."\n";
    } elsif ($rec eq '$COMP') { # competitor
	app->defaults->{car}{$row[1]}{class}  = app->defaults->{class}{$row[3]};
	app->defaults->{car}{$row[1]}{car}    = $row[1];
	app->defaults->{car}{$row[1]}{driver} = "$row[4] $row[5]";
    } elsif ($rec eq '$G') {  # order by position
	my $pos = $row[1];
	my $car = $row[2];
	my $laps = $row[3];
	app->log->debug("got a G record for car: $car  pos: $pos");


	#foreach my $prop (keys %{ app->defaults->{field}[$pos-1] }) {
	#    app->defaults->{field}[$pos-1]{$prop} = app->defaults->{car}{$car}{$prop};
        #}

	# I haven't figured out how protocol works in order to do this without
	# array manip stuff.  I am sure there is a way.

        app->defaults->{car}{$car}{position} = $pos;
	app->defaults->{car}{$car}{laps}     = $laps;

	my $car_info = { %{app->defaults->{car}{$car}} };

	if ( (defined(app->defaults->{field}[$pos-1])) and
	     ($car ne app->defaults->{field}[$pos-1]{car}) ) { # position changed

	    splice(@{app->defaults->{field}}, $pos-1, 0, $car_info); # insert

	    my $last_idx = scalar(@{app->defaults->{field}})-1;
	    for (my $idx = $last_idx; $idx >= 0; $idx--) {
                    #Logger->log("looking at idx: $idx val: ".$self->{order}->[$idx]);
		if (($car eq app->defaults->{field}[$idx]{car}) and
		    ($pos-1 != $idx)) {
		    splice(@{app->defaults->{field}}, $idx, 1);
		}
	    }
	} elsif ( !defined(app->defaults->{field}[$pos-1]) ) {   # it is first time so add car
	    app->log->debug("adding car: ".dumper($car_info."\n"));
	    app->defaults->{field}[$pos-1]  = $car_info;
	}

	    # copy structure and not the reference
	#if ( (!exists app->defaults->{car}{$car}{laps}) ||
        #     (app->defaults->{car}{$car}{laps} eq '')   ||
        #     ($laps ge app->defaults->{car}{$car}{laps}) ) {
	#    app->defaults->{car}{$car}{position} = $pos;
	#    app->defaults->{car}{$car}{laps} = $laps;
	#    app->defaults->{field}[$pos-1] = { %{app->defaults->{car}{$car}} };
        #}

    } elsif ($rec eq '$H') {  # order by time
	app->defaults->{car}{$row[2]}{bl_num}   = $row[3];
	app->defaults->{car}{$row[2]}{best_lap} =
	    time_to_dec($row[4]);
    } elsif ($rec eq '$J') {  # last lap time
	app->defaults->{car}{$row[1]}{last_lap} =
	    time_to_dec($row[2]);
    } elsif ($rec eq '$F') { # time ticker and flag info
	my $flag = $row[5];
	$flag =~ s/\s+$//;
	if (!$flag) { $flag = 'Stopped' }

        app->defaults->{session}{flag} = $flag;
	#$session{flag} = $flag;
    } elsif ($rec eq '$B') {
	my $event = $row[2];
        app->defaults->{session}{event} = $event;
	#app->log->error('TODO:  event');
	#$session{event} = $row->[2];
    }

};

sub time_to_dec {
    my $time = shift;

    if ($time =~ /(\d*):(\d*):(\d*\.*\d*)/) {
        $time = $1*3600 + $2*60 + $3;
    } # elsif ($time <= 1) { $time = undef;};  # bogus data.

    return $time;
}


helper tudor_standings_parser => sub {
    my ( $self, $tx, $lboard ) = @_;

    #print "in the parsing function: ".Dumper($tx->res->json)."\n";

    # parse

    my %tablemap = %{ $lboard->{tablemap} };

    delete app->defaults->{field};

    foreach my $row ( @{ $tx->res->json->{B} } ) {
	if ( $row->{N} eq 'SC' ) { next; }  # ignore Safety Car or some other dilineator
        my $pos;
        foreach my $key ( keys %tablemap ) {
            $pos->{ $tablemap{$key} } = $row->{$key};

# TODO:  Cleanups.  For example remove leading space from driver names, convert time

	    if ($tablemap{$key} eq 'status') {
		my $status;
		if ($pos->{ $tablemap{$key} } == 0) {
		    $status = 'Run';
		} elsif ($pos->{ $tablemap{$key} } == 1) {
		    $status = 'Pit';
	        } else {
		    $status = 'Unknown'
		}
		$pos->{ $tablemap{$key} } = $status;
	    }

        }
        push @{ app->defaults->{field} }, $pos;
    }

    #print Dumper(app->defaults->{field});

    # let ui bit know about potentially new stuff and do tts on interesting bits
    Mojo::IOLoop->next_tick( sub { app->review_field } );

};

helper review_field => sub {
    my $self = shift;

    app->log->info('Reviewing field for changes');

    my %prev_field = %{ app->defaults->{prev}{field} };
    app->log->debug('prev field: '.dumper(app->defaults->{prev}{field}));
    app->log->debug('field: '.dumper(app->defaults->{field}));

    foreach my $pos ( @{ app->defaults->{field} } ) {
	#app->log->debug('pos: '.dumper($pos));
	delete $pos->{changes} if exists $pos->{changes};   # if we are streaming don't use stale info
        if ( defined $prev_field{ $pos->{car} } ) {
            my %prev_pos = %{ $prev_field{ $pos->{car} } };

	    #app->log->debug('prev_pos pos: ' . $prev_pos{position});
	    #app->log->debug(sprintf('checking %s against %s', dumper($pos), dumper(%prev_pos)));
            # look at each key for interesting things and report on them
            foreach my $prop ( keys %$pos ) {
                if ( !app->renderer->get_helper($prop) ) { next }
                if ( my $change =
                    app->$prop( $prev_pos{$prop}, $pos->{$prop} ) )
                {
                    push @{ $pos->{changes} }, $change;
                }
            }
            if ( $pos->{changes} ) {
                app->announce($pos);

                #app->log->info(dumper($pos));
            }
        }
        app->defaults->{prev}{field}{ $pos->{car} } = { %$pos };   # copy structure not reference
    }

    # tell clients there is update ready
    app->publish( { type => 'update' } );
};

helper tudor_session_parser => sub {
    my ( $self, $tx, $lboard ) = @_;

    # parse

    my %tablemap = %{ $lboard->{tablemap} };

    delete app->defaults->{session};

    my $session;
    foreach my $key ( keys %tablemap ) {
        $session->{ $tablemap{$key} } = $tx->res->json->{$key};
    }

    # cleanup data
    my %flag_lookup = (
        0 => 'No Status',
        1 => 'Green',
        2 => 'Yellow',
        3 => 'Red',
        4 => 'Checkered',
        5 => 'White'
    );
    $session->{flag} = $flag_lookup{ $session->{flag} };

    app->defaults->{session} = $session;

    #app->log->debug(dumper(app->defaults->{session}));

    # let ui bit know about potentially new stuff and do tts on interesting bits
    Mojo::IOLoop->next_tick( sub { app->review_session } );

};

helper review_session => sub {
    my $self = shift;

    app->log->info('Reviewing session for changes');

    my %prev = %{ app->defaults->{prev}{session} };
    my %cur  = %{ app->defaults->{session} };

    # look for changes and report

    foreach my $prop ( keys %cur ) {
        app->$prop( $prev{$prop}, $cur{$prop} )
          if defined $prev{$prop} && app->renderer->get_helper($prop);
    }

    app->defaults->{prev}{session} = \%cur;

};

helper flag => sub {
    my ( $self, $prev, $cur ) = @_;

    if ( $prev eq $cur ) { return }

    app->speak( sprintf( '<voice name="Callie">%s flag</voice>', $cur ) );
};

helper event => sub {
    my ( $self, $prev, $cur ) = @_;

    if ( $prev eq $cur ) { return }

    app->speak( sprintf( '<voice name="Callie">The event is %s</voice>', $cur ) );
};

helper position => sub {
    my ( $self, $prev, $cur ) = @_;

    my $change;
    if ( $prev > $cur ) {
        $change = 'position_improve';
    }
    elsif ( $prev < $cur ) {
        $change = 'position_deprove';
    }

    if ($change) { app->log->debug('position changed'); }
    return $change;
};

helper driver => sub {
    my ( $self, $prev, $cur ) = @_;

    if ($prev ne $cur) { return 'driver' };
};

helper status => sub {
    my ( $self, $prev, $cur ) = @_;

    if (($prev ne $cur) && ($cur eq 'Pit')) { return 'status_pit' };
};

helper announce => sub {
    my ( $self, $car_ref ) = @_;

    my %car = %$car_ref;

    app->log->info( sprintf( 'car update: %s', $car{driver} ) );

    my %utts = (
        position_improve => {
            speaker => 'Callie',
            phrase  => '$car{driver} P$car{position}'
        },
        status_pit => {
            speaker => 'Callie',
            phrase  => '$car{driver} pitted'
        },
        #status_fin => {
        #    speaker => 'Lawrence',
        #    phrase  => '$car{driver} finished'
        #},
        #status_ret => {
        #    speaker => 'Diane',
        #    phrase  => '$car{driver} retired'
        #},
        driver => {
            speaker => 'Callie',
            phrase  => '$car{driver} in car $car{car}'
        },
        best_lap_overall => {
            speaker => 'Callie',
            phrase  => '$car{driver} best lap $car{last_lap_words}'
        },
        best_lap_p1 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best P1 lap $car{last_lap_words}'
        },
        best_lap_p2 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best P2 lap $car{last_lap_words}'
        },
        best_lap_gt1 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best GT1 lap $car{last_lap_words}'
        },
        best_lap_gt2 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best GT2 lap $car{last_lap_words}'
        },
        best_speed_overall => {
            speaker => 'Callie',
            phrase  => '$car{driver} best speed $car{best_speed}'
        },
        best_speed_p1 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best P1 speed $car{best_speed}'
        },
        best_speed_p2 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best P2 speed $car{best_speed}'
        },
        best_speed_gt1 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best GT1 speed $car{best_speed}'
        },
        best_speed_gt2 => {
            speaker => 'Callie',
            phrase  => '$car{driver} best GT2 speed $car{best_speed}'
        },
    );

    foreach ( @{ $car{changes} } ) {
        if ( defined $utts{$_} ) {
            my $utterance =
              "<voice name=\"$utts{$_}{speaker}\">$utts{$_}{phrase}</voice>\n";
            $utterance =~ s/\$car\{(\w+)\}/$car{$1}/g;

            app->speak($utterance);
        }

    }

};

helper speak => sub {
    my ( $self, $utterance ) = @_;

    app->log->info( sprintf( 'utterance: %s', $utterance ) );

    if ( app->defaults->{tts_count} ge 4 ) {
	app->log->info('tts has been throttled!');
	return
    }

    app->defaults->{tts_count}++;

    my $tmp = File::Temp->new(
        TEMPLATE => 'temp-XXXXX',
        DIR      => '../archive/audio',
        SUFFIX   => '.audio'
    );
    my $filename = $tmp->filename;

    my @args = ( '/opt/swift/bin/swift', '-o', $filename, $utterance );
    $self->fork_call(
        sub {
            my $detail = {
                type => 'audio',

                #driver     => $car{driver},
                file => $filename,

                #start      => time(),
                label => $utterance,
                url   => app->defaults->{audio_url},
            };

            system(@args);
            return $detail;
        },
        sub {
            my ( $c, $detail ) = @_;

            app->publish($detail);

            #app->log->info("returned with: " . dumper(@return));
        }
    );

};

helper reset_tts_throttle => sub {
    my $self = shift;

    app->defaults->{tts_count} = 0;

    Mojo::IOLoop->timer( 30 => sub { app->reset_tts_throttle } );
};

app->reset_tts_throttle;

app->set_series('Off');

$config->{rate} = 3;
app->set_series('RM');

#Mojo::IOLoop->timer( 3 => sub { app->set_series } );

app->start;

__DATA__

@@ script.html.ep
console.log("Leaderboard code running");

var lboard_ws = new WebSocket('<%= url_for('output')->to_abs %>');

setInterval(function () {
        lboard_ws.send(JSON.stringify( { type: "ping" } ));
        }, 45000
);

var lboard_config;
lboard_ws.onmessage = function (event) {
    var msg = $.parseJSON(event.data);

    switch (msg.type) {
        case 'audio':
            enqueue(msg);
            break;
        case 'update':
            leaderboard_page();
            break;
        case 'config':
            lboard_config = msg;
            lboard_config.boards.Off = 'dummy series';
            break;
    }

};

function injectStyles(rule) {
  var div = $("<div />", {
    html: '&shy;<style>' + rule + '</style>'
  }).appendTo("body");
}

injectStyles('.position_improve.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: green; }');
injectStyles('.position_deprove.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: red; }');
injectStyles('.status_pit.ui-btn.ui-btn-icon-right.ui-icon-carat-r { background-color: orange; }');

injectStyles = null;

leaderboard_page = function () {

    // TODO: this is pretty convoluted and better way should be found
    var active_id = $("#switcher").tabs("option", "active");
    active = $("#switcher ul>li a").eq(active_id).attr('href');

    if (active != '#leaderboard') { return }

    console.log("Populating leaderboard page");

    $.getJSON( '<%= url_for('standings')->to_abs %>' )
        .done(function( json ) {
   	    $('#leaderboard').empty().append('<ol data-role="listview" id="standings"></ol>');

	    json.forEach( function(pos) {

                    var contents = '<h2>' + pos.driver + ' (' + pos.car + ')</h2><p>' +
                                  pos.class + '/' + pos.model +
                                  '</p><div class="ui-li-aside"><p>Interval: ' +
                                  pos.interval + '</p><p>Gap: ' + pos.gap + '</p></div>';

                    var notice = 'default';
                    if (pos.changes) {
                        console.log('changes: ' + pos.changes);
                        notice = pos.changes.join(' ');
                    }
                    if (pos.status == 'Pit' && notice.indexOf('status_pit') == -1) {
                          // if just went into the pits don't add class for being in pits
                          notice = notice + ' status_pit';
                    }
                    //pos.changes.forEach( function(change) {
                    //    console.log('got a change: ' + change);
                    //});

		    $('<li/>')
		        .append(
		  	    $('<a/>', {
			        html: contents,
			        href: "#" + pos.car,
                                class: notice
			    })
			    ).appendTo("#standings");

                //console.log(pos)
            });

            // There may be another way but this appears to work:
            // http://www.gajotres.net/uncaught-error-cannot-call-methods-on-prior-to-initialization-attempted-to-call-method-refresh/
            $('#standings').listview().listview('refresh');

        });
};

leaderboard_config = function() {

    // approach from: http://stackoverflow.com/questions/16015810/jquery-mobile-best-way-to-create-pop-up-and-content-dynamically

    var $config = $("<div/>").popup({
        theme : "a",
        overlyaTheme : "a",
        transition : "pop"
    }).on("popupafterclose", function() {
        //remove the popup when closing
        $(this).remove();
    });

    $("<h2/>", {
        text : "Leaderboard Configuration"
    }).appendTo($config);

    $('<form id="container">').append(
        $('<label>', {
            for: 'rate',
            text: 'Refresh rate',
    }))
    .append($('<input/>', {
        type : 'range',
        name : 'rate',
        id : 'rate',
        value : lboard_config.rate,
        min : '0',
        max : '60'
    })).appendTo($config);

    $('<label>', {
        for: 'series',
        text : 'Series',
        class: 'select'
    }).appendTo('#container');

    $('#container').append('<select name="series" id="lboards"></select>');

    $.each( lboard_config.boards, function(name, detail) {
       $('<option/>', {
		        text: name,
		        value: name
		    })
		    .appendTo("#lboards");
    });

    //Create a submit button(fake)
    $("<a>", {
        text : "OK"
    }).buttonMarkup({
        inline : true,
        icon : "check"
    }).bind("click", function() {
        $config.popup("close");
        check_for_lboard_changes();
        //that.subscribeToAsset(callback);
    }).appendTo($config);

    //create a back button
    $("<a>", {
        text : "Cancel",
    }).buttonMarkup({
        inline : true,
        icon : "back"
    }).bind('click', function() {
        $config.popup('close');
    }).appendTo($config);


    $('#lboards').val( lboard_config.series );

    $config.popup("open").trigger("create");
};

check_for_lboard_changes = function() {

    if ( $('#rate').val() != lboard_config.rate ) {
        lboard_ws.send(JSON.stringify( { type: "set_rate", rate: $('#rate').val() } ));             }
    if ( $('#lboards').val() != lboard_config.series ) {
        lboard_ws.send(JSON.stringify( { type: "set_series", series: $('#lboards').val() } ));    }

};
