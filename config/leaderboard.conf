{
    rate => 5,

    boards => {
        TUDOR => {
	    method => 'get',
	    sources => [
		{
		    #url => 'http://localhost:8088',
		    url => 'http://multimedia.netstorage.imsa.com/scoring_data/RaceResults.json',

    #url => 'http://sordid.slotcar.prv/sample_json.html',
    # RaceData.json: http://netstorage.fanschoice.tv/media_players/test/scoring_data/RaceData.json
		    purpose  => 'tudor_standings',
		    tablemap => {
			A   => 'position',
			C   => 'class',
			N   => 'car',
			F   => 'driver',
			L   => 'laps',
			LL  => 'last_lap',      # need to convert time
			BL  => 'best_lap',
			IN  => 'bl_num',
			D   => 'gap',
			G   => 'interval',
			V   => 'model',
			P   => 'status',        # Maybe only "1" for Pit.  Not sure.
			FD  => 'fastest_driver',
			PIC => 'class_pos',
			PS  => 'total_pit',

			# Don't know: S, RM, A1 (copy of V?), A2, A3, LS, SR
			#
			# Tire tire     This now comes from seperate json file
			# Behind|next|in|class behind_in_class
			# Cum.|pit|time total_stop
		      }
		},
		{
		    #url => 'http://localhost:8089',
		    url => 'http://multimedia.netstorage.imsa.com/scoring_data/RaceData.json',

    # RaceData.json: http://netstorage.fanschoice.tv/media_players/test/scoring_data/RaceData.json
		    purpose => 'tudor_session',
		    tablemap => {
			A   => 'time',
			B   => 'status',
			C   => 'flag',
			T   => 'remaining',
			# Don't know: D, L
		    }
		},
            ],
        },
        RM => {
	    method => 'stream',
	    source => {
		    host    => 'XX.XX.XX.XX',
		    port    => XX,
		    purpose => 'rm_stream',
	    },
         },
	 fail => {
	     method => 'get',
	     sources => [
		{
		    url    => 'http://sordid.slotcar.prv/does_not_exist.html',
		    purpose => 'generate_a_failure',
		},
	     ],
	 },
    },
}
